/*
  Copyright (c) 2021 Stefan Kurtz <kurtz@zbh.uni-hamburg.de>
  Copyright (c) 2021 Center for Bioinformatics, University of Hamburg

  Permission to use, copy, modify, and distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
/* generated by ./alphabet.py. DO NOT EDIT. */
#ifndef ALPHABET_HPP
#define ALPHABET_HPP
#include <cstdint>
#include <cstddef>
#include <climits>
#include <cstdio>
#include <iostream>
template<int _size,uint8_t _undefined_rank>
class Alphabet
{
  const char *nucleotides = "AaCcGgTtUu";
  const char *amino_acids = "ACDEFGHIKLMNPQRSTVWY";
  static constexpr const uint8_t symbolmap[UCHAR_MAX+1] = {
    /* 0 */ _undefined_rank,
    /* 1 */ _undefined_rank,
    /* 2 */ _undefined_rank,
    /* 3 */ _undefined_rank,
    /* 4 */ _undefined_rank,
    /* 5 */ _undefined_rank,
    /* 6 */ _undefined_rank,
    /* 7 */ _undefined_rank,
    /* 8 */ _undefined_rank,
    /* 9 */ _undefined_rank,
    /* 10 */ _undefined_rank,
    /* 11 */ _undefined_rank,
    /* 12 */ _undefined_rank,
    /* 13 */ _undefined_rank,
    /* 14 */ _undefined_rank,
    /* 15 */ _undefined_rank,
    /* 16 */ _undefined_rank,
    /* 17 */ _undefined_rank,
    /* 18 */ _undefined_rank,
    /* 19 */ _undefined_rank,
    /* 20 */ _undefined_rank,
    /* 21 */ _undefined_rank,
    /* 22 */ _undefined_rank,
    /* 23 */ _undefined_rank,
    /* 24 */ _undefined_rank,
    /* 25 */ _undefined_rank,
    /* 26 */ _undefined_rank,
    /* 27 */ _undefined_rank,
    /* 28 */ _undefined_rank,
    /* 29 */ _undefined_rank,
    /* 30 */ _undefined_rank,
    /* 31 */ _undefined_rank,
    /* 32 */ _undefined_rank,
    /* 33 */ _undefined_rank,
    /* 34 */ _undefined_rank,
    /* 35 */ _undefined_rank,
    /* 36 */ _undefined_rank,
    /* 37 */ _undefined_rank,
    /* 38 */ _undefined_rank,
    /* 39 */ _undefined_rank,
    /* 40 */ _undefined_rank,
    /* 41 */ _undefined_rank,
    /* 42 */ _undefined_rank,
    /* 43 */ _undefined_rank,
    /* 44 */ _undefined_rank,
    /* 45 */ _undefined_rank,
    /* 46 */ _undefined_rank,
    /* 47 */ _undefined_rank,
    /* 48 */ _undefined_rank,
    /* 49 */ _undefined_rank,
    /* 50 */ _undefined_rank,
    /* 51 */ _undefined_rank,
    /* 52 */ _undefined_rank,
    /* 53 */ _undefined_rank,
    /* 54 */ _undefined_rank,
    /* 55 */ _undefined_rank,
    /* 56 */ _undefined_rank,
    /* 57 */ _undefined_rank,
    /* 58 */ _undefined_rank,
    /* 59 */ _undefined_rank,
    /* 60 */ _undefined_rank,
    /* 61 */ _undefined_rank,
    /* 62 */ _undefined_rank,
    /* 63 */ _undefined_rank,
    /* 64 */ _undefined_rank,
    /* A */ _size == 4 ? static_cast<uint8_t>(0)
: (_size == 20 ? static_cast<uint8_t>(0) : _undefined_rank),
    /* B */ _undefined_rank,
    /* C */ _size == 4 ? static_cast<uint8_t>(1)
: (_size == 20 ? static_cast<uint8_t>(1) : _undefined_rank),
    /* D */ _size == 20 ? 2 : _undefined_rank,
    /* E */ _size == 20 ? 3 : _undefined_rank,
    /* F */ _size == 20 ? 4 : _undefined_rank,
    /* G */ _size == 4 ? static_cast<uint8_t>(2)
: (_size == 20 ? static_cast<uint8_t>(5) : _undefined_rank),
    /* H */ _size == 20 ? 6 : _undefined_rank,
    /* I */ _size == 20 ? 7 : _undefined_rank,
    /* J */ _undefined_rank,
    /* K */ _size == 20 ? 8 : _undefined_rank,
    /* L */ _size == 20 ? 9 : _undefined_rank,
    /* M */ _size == 20 ? 10 : _undefined_rank,
    /* N */ _size == 20 ? 11 : _undefined_rank,
    /* O */ _undefined_rank,
    /* P */ _size == 20 ? 12 : _undefined_rank,
    /* Q */ _size == 20 ? 13 : _undefined_rank,
    /* R */ _size == 20 ? 14 : _undefined_rank,
    /* S */ _size == 20 ? 15 : _undefined_rank,
    /* T */ _size == 4 ? static_cast<uint8_t>(3)
: (_size == 20 ? static_cast<uint8_t>(16) : _undefined_rank),
    /* U */ _size == 4 ? static_cast<uint8_t>(3) : _undefined_rank,
    /* V */ _size == 20 ? 17 : _undefined_rank,
    /* W */ _size == 20 ? 18 : _undefined_rank,
    /* X */ _undefined_rank,
    /* Y */ _size == 20 ? 19 : _undefined_rank,
    /* Z */ _undefined_rank,
    /* 91 */ _undefined_rank,
    /* 92 */ _undefined_rank,
    /* 93 */ _undefined_rank,
    /* 94 */ _undefined_rank,
    /* 95 */ _undefined_rank,
    /* 96 */ _undefined_rank,
    /* a */ _size == 4 ? static_cast<uint8_t>(0) : _undefined_rank,
    /* b */ _undefined_rank,
    /* c */ _size == 4 ? static_cast<uint8_t>(1) : _undefined_rank,
    /* d */ _undefined_rank,
    /* e */ _undefined_rank,
    /* f */ _undefined_rank,
    /* g */ _size == 4 ? static_cast<uint8_t>(2) : _undefined_rank,
    /* h */ _undefined_rank,
    /* i */ _undefined_rank,
    /* j */ _undefined_rank,
    /* k */ _undefined_rank,
    /* l */ _undefined_rank,
    /* m */ _undefined_rank,
    /* n */ _undefined_rank,
    /* o */ _undefined_rank,
    /* p */ _undefined_rank,
    /* q */ _undefined_rank,
    /* r */ _undefined_rank,
    /* s */ _undefined_rank,
    /* t */ _size == 4 ? static_cast<uint8_t>(3) : _undefined_rank,
    /* u */ _size == 4 ? static_cast<uint8_t>(3) : _undefined_rank,
    /* v */ _undefined_rank,
    /* w */ _undefined_rank,
    /* x */ _undefined_rank,
    /* y */ _undefined_rank,
    /* z */ _undefined_rank,
    /* 123 */ _undefined_rank,
    /* 124 */ _undefined_rank,
    /* 125 */ _undefined_rank,
    /* 126 */ _undefined_rank,
    /* 127 */ _undefined_rank,
    /* 128 */ _undefined_rank,
    /* 129 */ _undefined_rank,
    /* 130 */ _undefined_rank,
    /* 131 */ _undefined_rank,
    /* 132 */ _undefined_rank,
    /* 133 */ _undefined_rank,
    /* 134 */ _undefined_rank,
    /* 135 */ _undefined_rank,
    /* 136 */ _undefined_rank,
    /* 137 */ _undefined_rank,
    /* 138 */ _undefined_rank,
    /* 139 */ _undefined_rank,
    /* 140 */ _undefined_rank,
    /* 141 */ _undefined_rank,
    /* 142 */ _undefined_rank,
    /* 143 */ _undefined_rank,
    /* 144 */ _undefined_rank,
    /* 145 */ _undefined_rank,
    /* 146 */ _undefined_rank,
    /* 147 */ _undefined_rank,
    /* 148 */ _undefined_rank,
    /* 149 */ _undefined_rank,
    /* 150 */ _undefined_rank,
    /* 151 */ _undefined_rank,
    /* 152 */ _undefined_rank,
    /* 153 */ _undefined_rank,
    /* 154 */ _undefined_rank,
    /* 155 */ _undefined_rank,
    /* 156 */ _undefined_rank,
    /* 157 */ _undefined_rank,
    /* 158 */ _undefined_rank,
    /* 159 */ _undefined_rank,
    /* 160 */ _undefined_rank,
    /* 161 */ _undefined_rank,
    /* 162 */ _undefined_rank,
    /* 163 */ _undefined_rank,
    /* 164 */ _undefined_rank,
    /* 165 */ _undefined_rank,
    /* 166 */ _undefined_rank,
    /* 167 */ _undefined_rank,
    /* 168 */ _undefined_rank,
    /* 169 */ _undefined_rank,
    /* 170 */ _undefined_rank,
    /* 171 */ _undefined_rank,
    /* 172 */ _undefined_rank,
    /* 173 */ _undefined_rank,
    /* 174 */ _undefined_rank,
    /* 175 */ _undefined_rank,
    /* 176 */ _undefined_rank,
    /* 177 */ _undefined_rank,
    /* 178 */ _undefined_rank,
    /* 179 */ _undefined_rank,
    /* 180 */ _undefined_rank,
    /* 181 */ _undefined_rank,
    /* 182 */ _undefined_rank,
    /* 183 */ _undefined_rank,
    /* 184 */ _undefined_rank,
    /* 185 */ _undefined_rank,
    /* 186 */ _undefined_rank,
    /* 187 */ _undefined_rank,
    /* 188 */ _undefined_rank,
    /* 189 */ _undefined_rank,
    /* 190 */ _undefined_rank,
    /* 191 */ _undefined_rank,
    /* 192 */ _undefined_rank,
    /* 193 */ _undefined_rank,
    /* 194 */ _undefined_rank,
    /* 195 */ _undefined_rank,
    /* 196 */ _undefined_rank,
    /* 197 */ _undefined_rank,
    /* 198 */ _undefined_rank,
    /* 199 */ _undefined_rank,
    /* 200 */ _undefined_rank,
    /* 201 */ _undefined_rank,
    /* 202 */ _undefined_rank,
    /* 203 */ _undefined_rank,
    /* 204 */ _undefined_rank,
    /* 205 */ _undefined_rank,
    /* 206 */ _undefined_rank,
    /* 207 */ _undefined_rank,
    /* 208 */ _undefined_rank,
    /* 209 */ _undefined_rank,
    /* 210 */ _undefined_rank,
    /* 211 */ _undefined_rank,
    /* 212 */ _undefined_rank,
    /* 213 */ _undefined_rank,
    /* 214 */ _undefined_rank,
    /* 215 */ _undefined_rank,
    /* 216 */ _undefined_rank,
    /* 217 */ _undefined_rank,
    /* 218 */ _undefined_rank,
    /* 219 */ _undefined_rank,
    /* 220 */ _undefined_rank,
    /* 221 */ _undefined_rank,
    /* 222 */ _undefined_rank,
    /* 223 */ _undefined_rank,
    /* 224 */ _undefined_rank,
    /* 225 */ _undefined_rank,
    /* 226 */ _undefined_rank,
    /* 227 */ _undefined_rank,
    /* 228 */ _undefined_rank,
    /* 229 */ _undefined_rank,
    /* 230 */ _undefined_rank,
    /* 231 */ _undefined_rank,
    /* 232 */ _undefined_rank,
    /* 233 */ _undefined_rank,
    /* 234 */ _undefined_rank,
    /* 235 */ _undefined_rank,
    /* 236 */ _undefined_rank,
    /* 237 */ _undefined_rank,
    /* 238 */ _undefined_rank,
    /* 239 */ _undefined_rank,
    /* 240 */ _undefined_rank,
    /* 241 */ _undefined_rank,
    /* 242 */ _undefined_rank,
    /* 243 */ _undefined_rank,
    /* 244 */ _undefined_rank,
    /* 245 */ _undefined_rank,
    /* 246 */ _undefined_rank,
    /* 247 */ _undefined_rank,
    /* 248 */ _undefined_rank,
    /* 249 */ _undefined_rank,
    /* 250 */ _undefined_rank,
    /* 251 */ _undefined_rank,
    /* 252 */ _undefined_rank,
    /* 253 */ _undefined_rank,
    /* 254 */ _undefined_rank,
    /* 255 */ _undefined_rank
  };
  public:
  constexpr Alphabet(void)
  {
    static_assert(_size == 4 || _size == 20);
  }
  constexpr uint8_t undefined_rank(void) const noexcept
  {
    return _undefined_rank;
  }
  constexpr size_t size(void) const noexcept
  {
    return _size;
  }
  constexpr uint8_t char_to_rank(unsigned char cc) const noexcept
  {
    return this->symbolmap[static_cast<int>(cc)];
  }
  constexpr const char *characters(void) const noexcept
  {
    if constexpr (_size == 4)
    {
      return nucleotides;
    }
    if constexpr (_size == 20)
    {
      return amino_acids;
    }
    return nullptr;
  }
};
#endif
