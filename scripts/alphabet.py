#!/usr/bin/env python3

import sys

def char_pretty(idx):
  if (idx >= ord('A') and idx <= ord('Z')) or \
     (idx >= ord('a') and idx <= ord('z')):
    return chr(idx)
  return str(idx)

def char_map(idx,s):
  return '    /* {} */ {}'.format(char_pretty(idx),s)

def rank_dict(character_groups):
  indexes = range(0,len(character_groups))
  return { cc : rank for cg, rank in zip(character_groups,indexes) for cc in cg}

amino_acids = "ACDEFGHIKLMNPQRSTVWY"
nucleotide_classes = ["Aa","Cc","Gg","TtUu"]

print('/* generated by {}. DO NOT EDIT. */'.format(' '.join(sys.argv)))
print('''#ifndef ALPHABET_HPP
#define ALPHABET_HPP
#include <cstdint>
#include <cstddef>
#include <climits>
#include <cstdio>
#include <iostream>
template<int _size,uint8_t _undefined_rank>
class Alphabet
{''')

print('  const char *nucleotides = "{}";'
      .format(''.join(nucleotide_classes)))
print('  const char *amino_acids = "{}";'.format(amino_acids))
print('  static constexpr const uint8_t symbolmap[UCHAR_MAX+1] = {')

rank_n = rank_dict(nucleotide_classes)
rank_a = rank_dict(list(amino_acids))
lines = list()
for idx in range(255 + 1):
  cc = chr(idx)
  if cc in rank_n:
    if cc in rank_a:
      s = ('_size == 4 ? static_cast<uint8_t>({})\n: (_size == 20 ? static_cast<uint8_t>({}) : _undefined_rank)'
           .format(rank_n[cc],rank_a[cc]))
    else:
      s = ('_size == 4 ? static_cast<uint8_t>({}) : _undefined_rank'
           .format(rank_n[cc]))
  else:
    if cc in rank_a:
      s = '_size == 20 ? {} : _undefined_rank'.format(rank_a[cc])
    else:
      s = '_undefined_rank'
  lines.append(char_map(idx,s))
print(',\n'.join(lines))

print('''  };
  public:
  constexpr Alphabet(void)
  {
    static_assert(_size == 4 || _size == 20);
  }
  constexpr uint8_t undefined_rank(void) const noexcept
  {
    return _undefined_rank;
  }
  constexpr size_t size(void) const noexcept
  {
    return _size;
  }
  constexpr uint8_t char_to_rank(unsigned char cc) const noexcept
  {
    return this->symbolmap[static_cast<int>(cc)];
  }
  constexpr const char *characters(void) const noexcept
  {
    if constexpr (_size == 4)
    {
      return nucleotides;
    }
    if constexpr (_size == 20)
    {
      return amino_acids;
    }
    return nullptr;
  }
};

namespace alpha /* for compatibility with masker, to be removed later. */
{
  using dna_alpha = Alphabet<4, 4>;
  using protein_alpha = Alphabet<20, 20>;
}
#endif''')
